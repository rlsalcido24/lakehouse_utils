
{{
    config(
        materialized = 'table'
    )
}}

select 
    cast(c_custkey as string) as stringkey,
    c_name,
    c_address,
    c_nationkey,
    c_phone, 
    (to_char(CASE   WHEN lower( 'month') IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 1000))   WHEN lower( 'month') IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 100))   WHEN lower( 'month') IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 10))   WHEN lower( 'month') IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}} / 1)   WHEN lower( 'month') IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'month') IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'month') IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( 'month') IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}} - 1   WHEN lower( 'month') IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'month') IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}   WHEN lower( 'month') IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'month') IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}   WHEN lower( 'month') IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}*1000   WHEN lower( 'month') IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}*1000000 ELSE NULL END, 'yyyy-MM')) as month,
    CASE   WHEN lower( days) IN ('millennium', 'millennia', 'mil', 'mils') THEN FLOOR(timestampdiff(YEAR,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp) / 1000)  WHEN lower( days) IN ('century', 'centuries',	'c', 'cent', 'cents') THEN FLOOR(timestampdiff(YEAR,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp) / 100)   WHEN lower( days) IN ('decade', 'decades', 'dec', 'decs') THEN FLOOR(timestampdiff(YEAR,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp) / 10)   WHEN lower( days) IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(timestampdiff(YEAR,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp) / 1)   WHEN lower( days) IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN timestampdiff(QUARTER,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)   WHEN lower( days) IN ('month', 'months', 'mon', 'mons') THEN timestampdiff(MONTH,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)  WHEN lower( days) IN ('week', 'weeks', 'w') THEN timestampdiff(WEEK,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)   WHEN lower( days) IN ('day', 'days', 'd') THEN timestampdiff(DAY,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)   WHEN lower( days) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN timestampdiff(HOUR,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)   WHEN lower( days) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN timestampdiff(MINUTE,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)  WHEN lower( days) IN ('second', 'seconds',	's', 'sec', 'secs') THEN timestampdiff(SECOND,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)  WHEN lower( days) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN timestampdiff(MILLISECOND,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp)  WHEN lower( days) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN timestampdiff(MICROSECOND,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp,  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp) ELSE NULL END as days_since_oldest_unpaid_due_date,
    CASE   WHEN lower( 'months') IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 1000))   WHEN lower( 'months') IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 100))   WHEN lower( 'months') IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(  date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')::timestamp ) - 1) / 10))   WHEN lower( 'months') IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}} / 1)   WHEN lower( 'months') IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'months') IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'months') IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( 'months') IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}} - 1   WHEN lower( 'months') IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'months') IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}   WHEN lower( 'months') IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}  WHEN lower( 'months') IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}   WHEN lower( 'months') IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}*1000   WHEN lower( 'months') IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  date_format({{lakehouse_utils.date_trunc("'second'"#tmpcommaplaceholder" current_timestamp()")}}"," 'yyyy-mm-dd hh:mm:ss')::timestamp")}}*1000000 ELSE NULL END,
    dateadd('day', -1, date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss')),
    case when 'organictest' rlike 'organic|email' then 'match' else 'no match' end as regexmatch,
    case when 'organictest' not rlike 'organic|email' then 'antimatch' else 'antino match' end as antiregexmatch
    log10(c_acctbal) as actbalbaseten,
    log10(c_acctbal) as actbalbaseten,
    get_json_object('{"f2":{"f3":1},"f4":{"f5":99,"f6":"star"}}', '$.f4.f6'),
    power(2.71828, 100),
    CASE  WHEN lower( "dow") IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(   2008-01-05 14:00:00 ::timestamp ) - 1) / 1000))  WHEN lower( "dow") IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(   2008-01-05 14:00:00 ::timestamp ) - 1) / 100))  WHEN lower( "dow") IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(   2008-01-05 14:00:00 ::timestamp ) - 1) / 10))   WHEN lower( "dow") IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  2008-01-05 14:00:00::timestamp")}} / 1)   WHEN lower( "dow") IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow") IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow") IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  2008-01-05 14:00:00::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( "dow" ::string) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  2008-01-05 14:00:00::timestamp")}} - 1   WHEN lower( "dow" ::string) IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow" ::string) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow"::string) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow" ::string) IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  2008-01-05 14:00:00::timestamp")}}   WHEN lower( "dow" ::string) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  2008-01-05 14:00:00::timestamp")}}*1000   WHEN lower( "dow" ::string) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  2008-01-05 14:00:00::timestamp")}}*1000000 ELSE NULL END,
    {{lakehouse_utils.hll_cardinality('expr')}},
    array_size('[11,12,13,{"f1":21,"f2":[25,26]},14]'),
    c_mktsegment,
    c_comment,
    date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss') as hoy,
    date_format({{lakehouse_utils.date_trunc("'second'"," current_timestamp()")}}, 'yyyy-MM-dd HH:mm:ss') AS get_date_caps_test,
    date_format(current_timestamp(), 'yyyy-MM-dd HH:mm:ss') AS sys_date_col_test,
    date_format(current_timestamp(), 'yyyy-MM-dd HH:mm:ss') AS sys_date_caps_col_test,
    coalesce(test, test_is_null) AS null_test_col_caps,
    coalesce(test, test_is_null) AS null_test_col_caps,
    coalesce(test, 'test_is_null') AS null_test_col,
    CASE  WHEN lower( "year") IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 1000))  WHEN lower( "year") IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 100))  WHEN lower( "year") IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 10))   WHEN lower( "year") IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  date(origination_date)::timestamp")}} / 1)   WHEN lower( "year") IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  date(origination_date)::timestamp")}}   WHEN lower( "year") IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  date(origination_date)::timestamp")}}   WHEN lower( "year") IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  date(origination_date)::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( "year" ::string) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  date(origination_date)::timestamp")}} - 1   WHEN lower( "year" ::string) IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  date(origination_date)::timestamp")}}   WHEN lower( "year" ::string) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  date(origination_date)::timestamp")}}   WHEN lower( "year"::string) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  date(origination_date)::timestamp")}}   WHEN lower( "year" ::string) IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}   WHEN lower( "year" ::string) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}*1000   WHEN lower( "year" ::string) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}*1000000 ELSE NULL END || '-' || 'Q' || floor(
            (CASE  WHEN lower( "month") IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 1000))  WHEN lower( "month") IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 100))  WHEN lower( "month") IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(   date(origination_date) ::timestamp ) - 1) / 10))   WHEN lower( "month") IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  date(origination_date)::timestamp")}} / 1)   WHEN lower( "month") IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  date(origination_date)::timestamp")}}   WHEN lower( "month") IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  date(origination_date)::timestamp")}}   WHEN lower( "month") IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  date(origination_date)::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( "month" ::string) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  date(origination_date)::timestamp")}} - 1   WHEN lower( "month" ::string) IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  date(origination_date)::timestamp")}}   WHEN lower( "month" ::string) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  date(origination_date)::timestamp")}}   WHEN lower( "month"::string) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  date(origination_date)::timestamp")}}   WHEN lower( "month" ::string) IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}   WHEN lower( "month" ::string) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}*1000   WHEN lower( "month" ::string) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  date(origination_date)::timestamp")}}*1000000 ELSE NULL END - 1) / 3) + 1 as origination_quarter,
    CASE  WHEN lower( 'SECONDS') IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(   '2019-10-01 00:00:01.000001'::timestamp ::timestamp ) - 1) / 1000))  WHEN lower( 'SECONDS') IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(   '2019-10-01 00:00:01.000001'::timestamp ::timestamp ) - 1) / 100))  WHEN lower( 'SECONDS') IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(   '2019-10-01 00:00:01.000001'::timestamp ::timestamp ) - 1) / 10))   WHEN lower( 'SECONDS') IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR({{lakehouse_utils.date_part("'year'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}} / 1)   WHEN lower( 'SECONDS') IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN {{lakehouse_utils.date_part("'quarter'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS') IN ('month', 'months', 'mon', 'mons') THEN {{lakehouse_utils.date_part("'month'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS') IN ('week', 'weeks', 'w') THEN {{lakehouse_utils.date_part("'week'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( 'SECONDS' ::string) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN {{lakehouse_utils.date_part("'dayofweek'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}} - 1   WHEN lower( 'SECONDS' ::string) IN ('day', 'days', 'd') THEN {{lakehouse_utils.date_part("'day'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS' ::string) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN {{lakehouse_utils.date_part("'hour'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS'::string) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN {{lakehouse_utils.date_part("'minute'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS' ::string) IN ('second', 'seconds',	's', 'sec', 'secs') THEN {{lakehouse_utils.date_part("'second'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}   WHEN lower( 'SECONDS' ::string) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN {{lakehouse_utils.date_part("'second'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}*1000   WHEN lower( 'SECONDS' ::string) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN {{lakehouse_utils.date_part("'second'","  '2019-10-01 00:00:01.000001'::timestamp::timestamp")}}*1000000 ELSE NULL END
    first_value(
            case when colA = 2 then id2
            end ) ignore nulls
          over (
            partition by
                customer_id
            order by
                created_at
            rows between unbounded preceding and unbounded following
        ) as test_syntax_change
from
    redshift_sample_data.tpch_rs1.customer
ORDER BY  colC NULLS FIRST,colB  DESC NULLS FIRST