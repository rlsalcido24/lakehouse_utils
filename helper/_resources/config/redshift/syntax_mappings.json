{"first_value_ignore_nulls": {"source_pattern": "(first_value\\()([\\s\\S]*.?(?=ignore\\snulls))(\\s?ignore\\snulls\\s*.?(?=\\)))(\\))(\\s*over\\s*)",
                              "target_pattern": "\\1\\2\\4 \\3 \\5"
                            },
"get_date_no_parents" : {"source_pattern": "getdate\\s",
                         "target_pattern": "getdate() "
                        },
"isnull_to_coalesce" : {"source_pattern": "isnull",
                        "target_pattern": "coalesce"
                       },
"order_by_desc_nulls_first_to_last": {"source_pattern": "(ORDER BY)([\\w\\s,]+\\b)(DESC)(?=\\s*$|\\s*\\n*)",
                                      "target_pattern": "\\1 \\2 \\3 NULLS FIRST"},
"order_by_asc_nulls_last_to_first_w_keyword": {"source_pattern": "(ORDER BY)([\\w\\s,]+\\b)(ASC)(?=\\s*$|\\s*\\n*)",
                                      "target_pattern": "\\1 \\2 \\3 NULLS LAST"},
"dexp_to_power" : {"source_pattern": "dexp\\([^)]*?\\)",
                  "target_pattern": "power(2.71828, #arg0)"
                       },
"dlog_to_ln" : {"source_pattern": "dlog1\\([^)]*?\\)",
                  "target_pattern": "ln(#arg0)"
                       },
"dlog10_to_log10" : {"source_pattern": "dlog10\\([^)]*?\\)",
                  "target_pattern": "log10(#arg0)"
                       },
"sysdate_to_df" : {"source_pattern": "sysdate\\(\\)",
                  "target_pattern": "date_format(current_timestamp(), 'yyyy-MM-dd HH:mm:ss')"
                       },                       
"hll_to_cardinality" : {"source_pattern": "hll\\([^)]*?\\)",
                      "target_pattern": "cardinality(#arg0)"
                       },
"hllcombine_to_union" : {"source_pattern": "hll_combine\\([^)]*?\\)",
                      "target_pattern": "hll_union_agg(#arg0)"
                       },
"hllcombinesketches_to_union" : {"source_pattern": "hll_combine_sketches\\([^)]*?\\)",
                   "target_pattern": "hll_union(#arg0, #arg1)"
                       },
"hllcreatesketch_to_sketchagg" : {"source_pattern": "hll_create_sketch\\([^)]*?\\)",
                      "target_pattern": "hll_sketch_agg(#arg0)"
                       },
"strtol_to_conv" : {"source_pattern": "strtol\\([^)]*?\\)",
                   "target_pattern": "conv(#arg0, #arg1, 10)"
                       },                                                                                                                                                                                                                                                      
"jsonextractpath_to_gjo" : {"source_pattern": "(json_extract_path_text\\()([^)]*)(\\))",
                   "target_pattern": "jsonextractpathplaceholder"
                       },
"jsonal_to_arraysize" : {"source_pattern": "json_array_length\\([^)]*?\\)",
                      "target_pattern": "array_size(#arg0)"
                       },

"convert_to_cast" : {"source_pattern": "convert\\([^)]*?\\)",
                   "target_pattern": "cast(#arg1 as #arg0)"
                       } ,                                             
"datepart_to_casewhen" : {"source_pattern": "date_part\\([^)]*?\\)",  "target_pattern": "CASE  WHEN lower( #arg0) IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR(  #arg1 ::timestamp ) - 1) / 1000))  WHEN lower( #arg0) IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR(  #arg1 ::timestamp ) - 1) / 100))  WHEN lower( #arg0) IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR(  #arg1 ::timestamp ) - 1) / 10))   WHEN lower( #arg0) IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(date_part('YEAR', #arg1::timestamp) / 1)   WHEN lower( #arg0) IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN date_part('QUARTER', #arg1::timestamp)   WHEN lower( #arg0) IN ('month', 'months', 'mon', 'mons') THEN date_part('MONTH', #arg1::timestamp)   WHEN lower( #arg0) IN ('week', 'weeks', 'w') THEN date_part('WEEK', #arg1::timestamp)  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( #arg0 ::string) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN date_part('DAYOFWEEK', #arg1::timestamp) - 1   WHEN lower( #arg0 ::string) IN ('day', 'days', 'd') THEN date_part('DAY', #arg1::timestamp)   WHEN lower( #arg0 ::string) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN date_part('HOUR', #arg1::timestamp)   WHEN lower( #arg0::string) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN date_part('MINUTE', #arg1::timestamp)   WHEN lower( #arg0 ::string) IN ('second', 'seconds',	's', 'sec', 'secs') THEN date_part('SECOND', #arg1::timestamp)   WHEN lower( #arg0 ::string) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN date_part('SECOND', #arg1::timestamp)*1000   WHEN lower( #arg0 ::string) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN date_part('SECOND', #arg1::timestamp)*1000000 ELSE NULL END"
                       },
"datetrunc_to_casewhen" : {"source_pattern": "date_trunc\\([^)]*?\\)",
                   "target_pattern": "CASE   WHEN lower( #arg0) IN ('millennium', 'millennia', 'mil', 'mils') THEN (CEILING((YEAR( #arg1::timestamp ) - 1) / 1000))   WHEN lower( #arg0) IN ('century', 'centuries',	'c', 'cent', 'cents') THEN (CEILING((YEAR( #arg1::timestamp ) - 1) / 100))   WHEN lower( #arg0) IN ('decade', 'decades', 'dec', 'decs') THEN (CEILING((YEAR( #arg1::timestamp ) - 1) / 10))   WHEN lower( #arg0) IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(date_part('YEAR', #arg1::timestamp) / 1)   WHEN lower( #arg0) IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN date_part('QUARTER', #arg1::timestamp)  WHEN lower( #arg0) IN ('month', 'months', 'mon', 'mons') THEN date_part('MONTH', #arg1::timestamp)  WHEN lower( #arg0) IN ('week', 'weeks', 'w') THEN date_part('WEEK', #arg1::timestamp)  Day of Week: in Redshift day of week is 0-6, starting with Sunday, Databricks is 1-7, starting with  WHEN lower( #arg0) IN ('day of week', 'dayofweek', 'dow', 'dw', 'weekday') THEN date_part('DAYOFWEEK', #arg1::timestamp) - 1   WHEN lower( #arg0) IN ('day', 'days', 'd') THEN date_part('DAY', #arg1::timestamp)  WHEN lower( #arg0) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN date_part('HOUR', #arg1::timestamp)   WHEN lower( #arg0) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN date_part('MINUTE', #arg1::timestamp)  WHEN lower( #arg0) IN ('second', 'seconds',	's', 'sec', 'secs') THEN date_part('SECOND', #arg1::timestamp)   WHEN lower( #arg0) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN date_part('SECOND', #arg1::timestamp)*1000   WHEN lower( #arg0) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN date_part('SECOND', #arg1::timestamp)*1000000 ELSE NULL END"
                       },
"datediff_to_casewhen" : {"source_pattern": "datediff\\([^)]*?\\)",
                   "target_pattern": "CASE   WHEN lower( #arg0) IN ('millennium', 'millennia', 'mil', 'mils') THEN FLOOR(timestampdiff(YEAR, #arg1::timestamp, #arg2::timestamp) / 1000)  WHEN lower( #arg0) IN ('century', 'centuries',	'c', 'cent', 'cents') THEN FLOOR(timestampdiff(YEAR, #arg1::timestamp, #arg2::timestamp) / 100)   WHEN lower( #arg0) IN ('decade', 'decades', 'dec', 'decs') THEN FLOOR(timestampdiff(YEAR, #arg1::timestamp, #arg2::timestamp) / 10)   WHEN lower( #arg0) IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(timestampdiff(YEAR, #arg1::timestamp, #arg2::timestamp) / 1)   WHEN lower( #arg0) IN ('quarter', 'quarters', 'qtr', 'qtrs') THEN timestampdiff(QUARTER, #arg1::timestamp, #arg2::timestamp)   WHEN lower( #arg0) IN ('month', 'months', 'mon', 'mons') THEN timestampdiff(MONTH, #arg1::timestamp, #arg2::timestamp)  WHEN lower( #arg0) IN ('week', 'weeks', 'w') THEN timestampdiff(WEEK, #arg1::timestamp, #arg2::timestamp)   WHEN lower( #arg0) IN ('day', 'days', 'd') THEN timestampdiff(DAY, #arg1::timestamp, #arg2::timestamp)   WHEN lower( #arg0) IN ('hour', 'hours',	'h', 'hr', 'hrs') THEN timestampdiff(HOUR, #arg1::timestamp, #arg2::timestamp)   WHEN lower( #arg0) IN ('minute', 'minutes', 'm', 'min', 'mins') THEN timestampdiff(MINUTE, #arg1::timestamp, #arg2::timestamp)  WHEN lower( #arg0) IN ('second', 'seconds',	's', 'sec', 'secs') THEN timestampdiff(SECOND, #arg1::timestamp, #arg2::timestamp)  WHEN lower( #arg0) IN ('millisecond', 'milliseconds',	'ms', 'msec', 'msecs', 'msecond', 'mseconds', 'millisec', 'millisecs', 'millisecon') THEN timestampdiff(MILLISECOND, #arg1::timestamp, #arg2::timestamp)  WHEN lower( #arg0) IN ('microsecond', 'microseconds',	'microsec', 'microsecs', 'microsecond', 'usecond', 'useconds', 'us', 'usec', 'usecs') THEN timestampdiff(MICROSECOND, #arg1::timestamp, #arg2::timestamp) ELSE NULL END" },                       
"customdatepart" : {"source_pattern": "date_part\\([^)]*?\\)",
                      "target_pattern": "date_part(#arg0, #arg1)"
                       },
"customdatetrunc" : {"source_pattern": "date_trunc\\([^)]*?\\)",
                      "target_pattern": "CASE WHEN lower( #arg0) IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(date_part('YEAR', #arg1::timestamp) / 1) WHEN lower( #arg0) IN ('month', 'months', 'mon', 'mons') THEN date_part('MONTH', #arg1::timestamp)  WHEN lower( #arg0) IN ('week', 'weeks', 'w') THEN date_part('WEEK', #arg1::timestamp) WHEN lower( #arg0) IN ('day', 'days', 'd') THEN date_part('DAY', #arg1::timestamp) ELSE NULL END"
                       },
"customdatediff" : {"source_pattern": "datediff\\([^)]*?\\)",
                      "target_pattern": "CASE WHEN lower( '#arg0') IN ('year', 'years','y', 'yr', 'yrs') THEN FLOOR(timestampdiff(YEAR, #arg1::timestamp, #arg2::timestamp) / 1) WHEN lower( '#arg0') IN ('month', 'months', 'mon', 'mons') THEN timestampdiff(MONTH, #arg1::timestamp, #arg2::timestamp)  WHEN lower( '#arg0') IN ('week', 'weeks', 'w') THEN timestampdiff(WEEK, #arg1::timestamp, #arg2::timestamp)   WHEN lower( '#arg0') IN ('day', 'days', 'd') THEN timestampdiff(DAY, #arg1::timestamp, #arg2::timestamp) ELSE NULL END"
                       },
"customdateadd" : {"source_pattern": "dateadd\\([^)]*?\\)",
                      "target_pattern": "dateadd(#arg0, #arg1, #arg2)"
                       },
"customposix" : {"source_pattern": "[^!]~",
                      "target_pattern": " rlike"
                       },
"customnoposix" : {"source_pattern": "!~",
                      "target_pattern": "not rlike"
                       },                                                                                         
"getdate_to_df" : {"source_pattern": "getdate\\(\\)",
                  "target_pattern": "date_format(date_trunc('second', current_timestamp()), 'yyyy-MM-dd HH:mm:ss')"
                       }                                                                                                             

}
        
